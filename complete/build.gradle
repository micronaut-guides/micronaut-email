plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "groovy"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}

version "0.1"
group "example.micronaut"

repositories {
    jcenter()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    implementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    //tag::awsses[]
    implementation('com.amazonaws:aws-java-sdk-ses:1.11.285')
    //end::awsses[]
    //tag::sendgrid[]
    implementation('com.sendgrid:sendgrid-java:4.1.2')
    //end::sendgrid[]
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    //tag::validator[]
    implementation('io.micronaut:micronaut-validation')
    //end::validator[]

    //tag::spock[]
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("io.micronaut.test:micronaut-test-spock")
    //end::spock[]

    runtimeOnly("ch.qos.logback:logback-classic:1.2.3")

}

test.classpath += configurations.developmentOnly

mainClassName = "example.micronaut.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=example.micronaut.*',
        '-Amicronaut.processing.group=example.micronaut',
        '-Amicronaut.processing.module=complete',
    ])
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

test {
    systemProperty "sendgrid.apikey", System.getProperty('sendgrid.apikey')
    systemProperty "sendgrid.fromemail", System.getProperty('sendgrid.fromemail')
    systemProperty "aws.accesskeyid", System.getProperty("aws.accesskeyid")
    systemProperty "aws.secretkey", System.getProperty("aws.secretkey")
    systemProperty "aws.region", System.getProperty("aws.region")
    systemProperty "aws.sourceemail", System.getProperty("aws.sourceemail")
}

apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"
